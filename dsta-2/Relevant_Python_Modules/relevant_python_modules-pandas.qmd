---
title: "Relevant Python modules: pandas"
lang: en
author: AM 
format:
  revealjs: 
    theme: serif
  html:
    code-fold: false
jupyter: python3
---

## Pandas

::: {.nonincremental}

- Conceived by Wes McKinney. Quantitative analyst for hedge fund AQR.
::: {.nonincremental}

-It is a library for processing tabular data, both numeric and time series.

-Provides data structures (series, dataframe) and methods for data analysis.
:::

Python for Data Analysis. Wes McKinney
:::

```bash
pip install pandas
```

Available by default with Anaconda.

## Data Structures - Series

A one dimension object containing values, and associated labels called Index. 

Unless we assign indices, P. will simply enumerate the items.

```{python}
import numpy as np
import pandas as pd
```

```{python}
# a simple series

s1 = pd.Series([10, 20, 30,40])

s1
```
```{python}
# here we assign indices specified in a list to our data

s2 = pd.Series([10, 20, 30,40], index = ['a','b','c','d'])

s2
```

```{python}
# Alternatively a dictionary can be converted into a DataFrame: keys correspond to indices.
d1 = {'a':10,'b':20,'c':30,'d':40}

s3 = pd.Series(d1)

s3
```

## Data Structures - Series

You can use the index to select one or more specific values.

```{python}
# Get the data on position 'a' of s3

s3['a']
```

```{python}
# Get the data indexed 'a' and 'c' of s3

s3[['a','c']]

```

You can filter elements
```{python}
# Get the data smaller than 25

s3[s3<25]

```

apply element-wise mathematical operations

```{python}
# Square every element of s3

s3**2

```

or a combination of both

```{python}
# Square every element of s3 smaller than 25

s3[s3<25]**2

```

## Data Structures - DataFrame

In Pandas, DataFrames are 2D structures.
Values are labelled by their index and column location.

Example: set up a DataFrame

```{python}
import pandas as pd

# Notice how we specify columns.

new_df = pd.DataFrame([10, 20, 30,40], columns = ['Integers'], index = ['a','b','c','d'])

new_df
```

```{python}
# Now we add a column.

new_df['Floats'] = (1.5, 2.5, 3.5,4.5)

new_df
```
## Data Structures: DataFrame - 'loc'

You can select specific data according to its location label.

```{python}
# here loc slices data using index name.

new_df.loc['c'] 

```

```{python}
# here loc slices data using column name.

new_df.loc[:,'Integers'] #or new_df['numbers']

```

```{python}
# here we use both index and column name.

new_df.loc['c','Integers'] 

```

## Data Structures: DataFrame - 'iloc'

Select a specific slice of data according to its position.


```{python}
# here loc slices data using index number.

new_df.iloc[2] 

```

```{python}
# here loc slices data using column number.

new_df.iloc[:, 0] 

```

```{python}
# here we use both index and column number.

new_df.iloc[2,0] 

```

## Data Structures: DataFrame - filters

Complex selection is achieved applying Boolean filters.
Multiple conditions can be combined in one statement.

```{python}

new_df[new_df['Integers']>10] 

```
```{python}
# here we apply conditions to both columns.

new_df[(new_df.Integers>10) & (new_df.Floats>2.5)] 

```

## Data Structures: DataFrame - Axis

DataFrames operate on 2 dimensions.

Axis = 0 invokes functions across rows. This is the default behaviour if axis is not specified.

```{python}

new_df.sum() 

```


Axis = 1 invokes functions across columns.

```{python}

new_df.sum(axis=1) 

```

## Data Structures: DataFrame - Axis

We can mix element-wise operations with functions applied to a given axis

Example: Create a column with the sum of squares of each row.

```{python}

#In 1 line of code!

new_df['sumsq'] = (new_df**2).sum(axis=1) 

new_df

```

## Reading a file into pandas

Pandas can read a file and turn it into a DataFrame. 
Several arguments are available to specify the behavior of the process.

Some examles:
index_col sets the column of the csv file to be used as index of the DataFrame
sep specifies the separator in the source file
parse_dates indicates which column to be converted as a datetime objects

``` python
FILE = 'some_file.csv'

df_r = pd.read_csv(FILE, 
                    index_col = 0, 
                    sep = ';',
                    parse_dates = ['date'] )

```

## Biostats data - info()

The info() method outputs top-down information on the DataFrame

```{python}
FILE = 'data/biostats.csv'

df_bio = pd.read_csv(FILE)

df_bio.info()

```
## Biostats data - head() and tail()

These convenient methods visualise respectively the first/last n rows (default = 5) in the DataFrame.  

```{python}

df_bio.head()

```

```{python}

df_bio.tail()

```

## Biostats data - index column  

Selecting the index column affects the structure of the DataFrame and information retrieval.
CAUTION: the index does not have to be unique. Multiple rows could have the same index name.

```{python}

df_bio2 = pd.read_csv('data/biostats.csv', index_col=0) #here we set the Name column as the index

df_bio2.head()

```

```{python}

#It is now possible to use elements of the Name column to select an entire row
df_bio2.loc['Bert'] 

```

## Descriptive statistics - describe()

Pandas selects quantitative variables and computes descriptive statistics

```{python}

#Descriptive statistics for the entire DataFrame
df_bio.describe() 

```
```{python}

#Descriptive statistics for the Age variable
df_bio['Age'].describe() 

```

## Descriptive statistics - categorcal variables

The value_counts() method computes the unique values and how many time they occurr.

```{python}

#Descriptive statistics for the entire DataFrame
df_bio.Sex.value_counts()

```